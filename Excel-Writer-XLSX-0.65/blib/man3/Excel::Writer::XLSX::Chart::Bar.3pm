.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Excel::Writer::XLSX::Chart::Bar 3pm"
.TH Excel::Writer::XLSX::Chart::Bar 3pm "2012-12-31" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bar \- A class for writing Excel Bar charts.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To create a simple Excel file with a Bar chart using Excel::Writer::XLSX:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqchart.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&
\&    my $chart     = $workbook\->add_chart( type => \*(Aqbar\*(Aq );
\&
\&    # Configure the chart.
\&    $chart\->add_series(
\&        categories => \*(Aq=Sheet1!$A$2:$A$7\*(Aq,
\&        values     => \*(Aq=Sheet1!$B$2:$B$7\*(Aq,
\&    );
\&
\&    # Add the worksheet data the chart refers to.
\&    my $data = [
\&        [ \*(AqCategory\*(Aq, 2, 3, 4, 5, 6, 7 ],
\&        [ \*(AqValue\*(Aq,    1, 4, 5, 2, 1, 5 ],
\&    ];
\&
\&    $worksheet\->write( \*(AqA1\*(Aq, $data );
\&
\&    _\|_END_\|_
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements Bar charts for Excel::Writer::XLSX. The chart object is created via the Workbook \f(CW\*(C`add_chart()\*(C'\fR method:
.PP
.Vb 1
\&    my $chart = $workbook\->add_chart( type => \*(Aqbar\*(Aq );
.Ve
.PP
Once the object is created it can be configured via the following methods that are common to all chart classes:
.PP
.Vb 4
\&    $chart\->add_series();
\&    $chart\->set_x_axis();
\&    $chart\->set_y_axis();
\&    $chart\->set_title();
.Ve
.PP
These methods are explained in detail in Excel::Writer::XLSX::Chart. Class specific methods or settings, if any, are explained below.
.SH "Bar Chart Subtypes"
.IX Header "Bar Chart Subtypes"
The \f(CW\*(C`Bar\*(C'\fR chart module also supports the following sub-types:
.PP
.Vb 2
\&    stacked
\&    percent_stacked
.Ve
.PP
These can be specified at creation time via the \f(CW\*(C`add_chart()\*(C'\fR Worksheet method:
.PP
.Vb 1
\&    my $chart = $workbook\->add_chart( type => \*(Aqbar\*(Aq, subtype => \*(Aqstacked\*(Aq );
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here is a complete example that demonstrates most of the available features when creating a chart.
.PP
.Vb 1
\&    #!/usr/bin/perl
\&
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqchart_bar.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    my $bold      = $workbook\->add_format( bold => 1 );
\&
\&    # Add the worksheet data that the charts will refer to.
\&    my $headings = [ \*(AqNumber\*(Aq, \*(AqBatch 1\*(Aq, \*(AqBatch 2\*(Aq ];
\&    my $data = [
\&        [ 2,  3,  4,  5,  6,  7 ],
\&        [ 10, 40, 50, 20, 10, 50 ],
\&        [ 30, 60, 70, 50, 40, 30 ],
\&
\&    ];
\&
\&    $worksheet\->write( \*(AqA1\*(Aq, $headings, $bold );
\&    $worksheet\->write( \*(AqA2\*(Aq, $data );
\&
\&    # Create a new chart object. In this case an embedded chart.
\&    my $chart = $workbook\->add_chart( type => \*(Aqbar\*(Aq, embedded => 1 );
\&
\&    # Configure the first series.
\&    $chart\->add_series(
\&        name       => \*(Aq=Sheet1!$B$1\*(Aq,
\&        categories => \*(Aq=Sheet1!$A$2:$A$7\*(Aq,
\&        values     => \*(Aq=Sheet1!$B$2:$B$7\*(Aq,
\&    );
\&
\&    # Configure second series. Note alternative use of array ref to define
\&    # ranges: [ $sheetname, $row_start, $row_end, $col_start, $col_end ].
\&    $chart\->add_series(
\&        name       => \*(Aq=Sheet1!$C$1\*(Aq,
\&        categories => [ \*(AqSheet1\*(Aq, 1, 6, 0, 0 ],
\&        values     => [ \*(AqSheet1\*(Aq, 1, 6, 2, 2 ],
\&    );
\&
\&    # Add a chart title and some axis labels.
\&    $chart\->set_title ( name => \*(AqResults of sample analysis\*(Aq );
\&    $chart\->set_x_axis( name => \*(AqTest number\*(Aq );
\&    $chart\->set_y_axis( name => \*(AqSample length (mm)\*(Aq );
\&
\&    # Set an Excel chart style. Blue colors with white outline and shadow.
\&    $chart\->set_style( 11 );
\&
\&    # Insert the chart into the worksheet (with an offset).
\&    $worksheet\->insert_chart( \*(AqD2\*(Aq, $chart, 25, 10 );
\&
\&    _\|_END_\|_
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
John McNamara jmcnamara@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright MM-MMXII, John McNamara.
.PP
All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.
